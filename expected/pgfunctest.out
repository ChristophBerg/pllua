CREATE OR REPLACE FUNCTION i_void(internal)
  RETURNS internal AS
$BODY$
-- mymodule.lua
local M = {} -- public interface

-- private
local x = 1
local function baz() print 'test' end

function M.foo() print("foo", x) end

function M.bar()
  M.foo()
  baz()
  print "bar"
end

function M.getAnswer()
  return 42
end

return M

$BODY$ LANGUAGE pllua;
CREATE OR REPLACE FUNCTION pg_temp.pgfunc_test()
RETURNS SETOF text AS $$
  local quote_ident = pgfunc("quote_ident(text)")
  coroutine.yield(quote_ident("int"))
  local right = pgfunc("right(text,int)")
  coroutine.yield(right('abcde', 2))
  local factorial = pgfunc("factorial(int8)")
  coroutine.yield(tostring(factorial(50)))
  local i_void = pgfunc("i_void(internal)")
  coroutine.yield(i_void.getAnswer())
$$ LANGUAGE pllua;
select pg_temp.pgfunc_test();
                            pgfunc_test                            
-------------------------------------------------------------------
 "int"
 de
 30414093201713378043612608166064768844377641568960512000000000000
 42
(4 rows)

do $$
print(pgfunc('quote_nullable(text)')(nil))
$$ language pllua;
INFO:  NULL
create or replace function pg_temp.throw_error(text) returns void as $$
begin
raise exception '%', $1;
end
$$ language plpgsql;
do $$
pgfunc('pg_temp.throw_error(text)',{only_internal=false})("exception test")
$$ language pllua;
ERROR:  exception test
CONTEXT:  
stack traceback(trusted):
	[C]: ?
	[string "anonymous"]:2: in main chunk
do $$
local f = pgfunc('pg_temp.throw_error(text)',{only_internal=false})
print(pcall(f, "exception test"))
$$ language pllua;
INFO:  false	exception test
create or replace function pg_temp.no_throw() returns jsonb as $$
select '{"a":5, "b":10}'::jsonb
$$ language sql;
do $$
local f = pgfunc('pg_temp.no_throw()',{only_internal=false, throwable=false})
print(f())
$$ language pllua;
INFO:  {"a": 5, "b": 10}
CREATE or replace FUNCTION pg_temp.arg_count(a1 integer,a2 integer,a3 integer,a4 integer,a5 integer
,a6 integer,a7 integer,a8 integer,a9 integer,a10 integer
,a11 integer,a12 integer,a13 integer,a14 integer,a15 integer ) returns integer AS
$$
begin
return a1+a2+a3+a4+a5+a6+a7+a8+a9+a10+a11+a12+a13+a14+a15;
end
$$
LANGUAGE plpgsql;
do $$
local f = pgfunc([[pg_temp.arg_count(integer, integer, integer, integer, integer,
 integer, integer, integer, integer, integer, 
 integer, integer, integer, integer, integer ) ]],{only_internal=false});
print(f(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))
$$ language pllua;
INFO:  120
CREATE or replace FUNCTION pg_temp.inoutf(a integer, INOUT b text, INOUT c text)  AS
$$
begin
c = a||'c:'||c;
b = 'b:'||b;
end
$$
LANGUAGE plpgsql;
do $$
local f = pgfunc('pg_temp.inoutf(integer,text,text)',{only_internal=false});
local r = f(5, 'ABC', 'd')
print(r.b)
print(r.c)
$$ language pllua
INFO:  b:ABC
INFO:  5c:d
